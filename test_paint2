import tkinter as tk
import cv2
import numpy as np
from tensorflow.keras.models import load_model # type: ignore
import keras.preprocessing.image as image_utils # type: ignore
from PIL import Image, ImageGrab, ImageTk
import uuid
import os
import tkinter.messagebox as mb
import matplotlib.pyplot as plt

# Carica il modello addestrato
model = load_model("mnist_numeri_miei_augmented_c.keras")
g_confidenza=26
g_predizione=30
# Funzione per gestire il disegno sul canvas
def paint(event):
    x1, y1 = (event.x - 20), (event.y - 20)
    x2, y2 = (event.x + 20), (event.y + 20)
    canvas.create_oval(x1, y1, x2, y2, fill="black", width=4)

# Funzione per pulire il canvas
def clear_canvas():
    canvas.delete("all")

# Funzione per prevedere il numero dall'immagine disegnata
def predict_number():
    try:
        x0 = canvas.winfo_rootx()
        y0 = canvas.winfo_rooty()
        
        # Dimensioni dello schermo
        x1 = 890
        y1 = 890
        
        # Acquisizione dell'immagine dalla canvas
        img = ImageGrab.grab((x0, y0, x1 + x0, y1 + y0))
        
        # Salvataggio dell'immagine
        filename = save_image(img)
        
        # Caricamento dell'immagine in modalità grayscale e dimensioni 28x28
        img = image_utils.load_img(filename, color_mode="grayscale", target_size=(28, 28))
        
        # Conversione dell'immagine in un array NumPy
        img = image_utils.img_to_array(img)
        
        # Denoising con filtro bilaterale
        img = cv2.bilateralFilter(img, 9, 75, 75)
        
        # Reshape dell'immagine in un singolo campione con 1 canale
        img = img.reshape(1, 28, 28, 1)
        
        # Normalizzazione dei dati dei pixel
        img = img.astype("float32") / 255.0
        
        # Previsione del numero con il modello
        prediction = model.predict(img)
        predicted_number = np.argmax(prediction)

        # Calcolo delle percentuali di confidenza
        confidence_scores = prediction[0]
        top_3_indices = confidence_scores.argsort()[-3:][::-1]
        top_3_confidences = confidence_scores[top_3_indices] * 100

        # Visualizzazione del numero predetto in rosso e più grande
        predicted_label.config(text=f"Numero predetto: {top_3_indices[0]}", fg="red", font=("Helvetica", g_predizione, "bold"))

        # Visualizzazione delle percentuali di confidenza
        confidence_text = (f"Confidenza: {top_3_confidences[0]:.2f}% (Numero: {top_3_indices[0]})\n"
                        f"Seconda confidenza: {top_3_confidences[1]:.2f}% (Numero: {top_3_indices[1]})\n"
                        f"Terza confidenza: {top_3_confidences[2]:.2f}% (Numero: {top_3_indices[2]})")
        precision_label.config(text=confidence_text, fg="red", font=("Helvetica", g_confidenza, "bold"))
        
    except Exception as e:
        mb.showerror("Errore", f"Si è verificato un errore: {e}")

# Funzione per salvare l'immagine predetta
def save_image(img):
    try:
        # Creazione della directory per le immagini se non esiste
        image_dir = "captured_images"
        if not os.path.exists(image_dir):
            os.makedirs(image_dir)

        # Generazione di un nome univoco per l'immagine
        filename = os.path.join(image_dir, f"{uuid.uuid4()}.png")

        # Salvataggio dell'immagine
        img.save(filename)
        
        return filename

    except Exception as e:
        mb.showerror("Errore", f"Si è verificato un errore durant eil salvataggio dell'immagine: {e}")

# Funzione per aprire l'immagine salvata
def open_image(filename):
    try:
        # Creazione di una finestra temporanea per visualizzare l'immagine
        image_window = tk.Toplevel(root)
        image_window.title(f"Immagine {filename}")

        # Caricamento dell'immagine utilizzando Pillow
        image = Image.open(filename)

        # Ridimensionamento dell'immagine per adattarla alla finestra
        window_width = 500
        window_height = int((image.height / image.width) * window_width)
        resized_image = image.resize((window_width, window_height))

        # Conversione dell'immagine in un oggetto Tkinter PhotoImage
        img_tk = ImageTk.PhotoImage(resized_image)

        # Creazione di una label per visualizzare l'immagine
        image_label = tk.Label(image_window, image=img_tk)
        image_label.image = img_tk
        image_label.pack()

        # Esecuzione del loop principale di Tkinter per la finestra dell'immagine
        image_window.mainloop()

    except Exception as e:
        mb.showerror("Errore", f"Si è verificato un errore durante l'apertura dell'immagine: {e}")

# Crea la finestra principale della GUI
root = tk.Tk()
root.title("Riconoscimento Numeri")

# Massimizza la finestra
root.state('zoomed')

# Carica l'immagine di sfondo
background_image = Image.open("sfondo\\esagonale.jpg")
background_photo = ImageTk.PhotoImage(background_image)

# Crea una label per l'immagine di sfondo
background_label = tk.Label(root, image=background_photo)
background_label.place(relwidth=1, relheight=1)

# Definisci il canvas per il disegno
canvas = tk.Canvas(root, width=700, height=700, bg="white", borderwidth=0)
canvas.grid(row=0, column=0, rowspan=5, padx=10, pady=10)

# Collega gli eventi del mouse per disegnare sul canvas
canvas.bind("<B1-Motion>", paint)

# Button per predire il numero
predict_button = tk.Button(root, text="Predici Numero", command=predict_number, bg="#4CAF50", fg="white", font=("Helvetica", 14, "bold"))
predict_button.grid(row=2, column=1, padx=10, pady=10)

# Button per pulire il canvas
clear_button = tk.Button(root, text="Pulisci", command=clear_canvas, bg="#9E9E9E", fg="white", font=("Helvetica", 14, "bold"))
clear_button.grid(row=1, column=1, padx=10, pady=10)

# Button per chiudere la finestra
close_button = tk.Button(root, text="Chiudi", command=root.destroy, bg="#f44336", fg="white", font=("Helvetica", 14, "bold"))
close_button.grid(row=0, column=1, padx=10, pady=10)

# Label per visualizzare il numero predetto
predicted_label = tk.Label(root, text="Disegna un Numero", fg="red", font=("Helvetica", g_predizione, "bold"))
predicted_label.grid(row=3, column=1, padx=10, pady=10)

# Label per visualizzare la confidenza predetta
precision_label = tk.Label(root, text="Il programma cercherà di capire che numero è", fg="red", font=("Helvetica", g_confidenza, "bold"))
precision_label.grid(row=4, column=1, padx=10, pady=10)

root.mainloop()
